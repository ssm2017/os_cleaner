#!/bin/bash

# get some vars
MYSQL=`which mysql`
DB_NAME="prod_grid"
checked_count=0
failed_count=0

# start the log
LOG_FOLDER="/var/log/opensim"
LOG_FILE="${LOG_FOLDER}/delete_phantom_regions.log"
if [ ! -d ${LOG_FOLDER} ]; then
  mkdir -p ${LOG_FOLDER}
  if [ ! $? -eq 0 ]; then
    exit 1;
  fi
fi
echo -e "=============================" >> ${LOG_FILE}
echo -e $(date +'%F') >> ${LOG_FILE}

# get regions without registered owner
count_orphaned_regions_query="SELECT COUNT(*) FROM ${DB_NAME}.regions AS r LEFT JOIN ${DB_NAME}.UserAccounts AS ua ON ua.PrincipalID=r.owner_uuid WHERE ua.PrincipalID is null"
orphaned_regions_count=`$MYSQL --batch --skip-column-names -e "${count_orphaned_regions_query}"`
echo -e "$(/bin/date +%Y/%m/%d-%T) : Orphaned : ${orphaned_regions_count}" >> ${LOG_FILE}
if [ ${orphaned_regions_count} -gt 0 ]; then
  get_orphaned_regions_query="SELECT concat(r.regionName, ';', r.uuid, ';', r.serverURI, ';', r.owner_uuid) FROM ${DB_NAME}.regions AS r LEFT JOIN ${DB_NAME}.UserAccounts AS ua ON ua.PrincipalID=r.owner_uuid WHERE ua.PrincipalID is null"
  orphaned_regions=`$MYSQL --batch --skip-column-names -e "${get_orphaned_regions_query}" | tr ' ' '_'`
  for orphaned_region in ${orphaned_regions}; do
    region_name=$(echo ${orphaned_region} | cut -d ";" -f 1)
    region_uuid=$(echo ${orphaned_region} | cut -d ";" -f 2)
    region_uri=$(echo ${orphaned_region} | cut -d ";" -f 3)
    region_owner_uuid=$(echo ${orphaned_region} | cut -d ";" -f 4)
    echo -e "$(/bin/date +%Y/%m/%d-%T) : Orphaned region : Region named \"${region_name}\" owned by \"${region_owner_uuid}\" with uri at ${region_uri}" >> ${LOG_FILE}
    $MYSQL --batch --skip-column-names -e "DELETE FROM ${DB_NAME}.regions WHERE uuid=${region_uuid}"
  done
fi

# get regions
get_regions_query="SELECT concat(r.regionName, ';', r.uuid, ';', r.serverURI, ';', r.owner_uuid, ';', ua.Email, ';', concat(ua.FirstName, '.', ua.LastName)) FROM ${DB_NAME}.regions AS r LEFT JOIN ${DB_NAME}.UserAccounts AS ua ON ua.PrincipalID=r.owner_uuid"
regions=`$MYSQL --batch --skip-column-names -e "${get_regions_query}" | tr ' ' '_'`

# check regions
for region in ${regions}; do
  ((checked_count++))
  # get values
  region_name=$(echo ${region} | cut -d ";" -f 1)
  region_uuid=$(echo ${region} | cut -d ";" -f 2)
  region_uri=$(echo ${region} | cut -d ";" -f 3)
  region_owner_uuid=$(echo ${region} | cut -d ";" -f 4)
  user_email=$(echo ${region} | cut -d ";" -f 5)
  user_name=$(echo ${region} | cut -d ";" -f 6)
  echo ${region}
  # run the test
  region_uri_test="${region_uri}monitorstats/${region_uuid}"
  response=$(curl --max-time 10 --retry 3 --retry-delay 5 --retry-max-time 50 --connect-timeout 5 --write-out %{http_code} --silent --output /dev/null ${region_uri_test})
  if [ ! ${response} -eq 200 ]; then
    ((failed_count++))
    echo -e "$(/bin/date +%Y/%m/%d-%T) : Region named : \"${region_name}\" owned by \"${region_owner}\" is not responding at ${region_uri_test}. Response = ${response}" >> ${LOG_FILE}
    $MYSQL --batch --skip-column-names -e "DELETE FROM ${DB_NAME}.regions WHERE uuid=${region_uuid}"
    # send an email to the owner to tell him/her
    echo "Your region named \"${region_name}\" was deleted on the grid because it is not responding. Please restart it if needed." | mail -s 'Region deleted on the grid' ${user_email}
  fi
done
echo -e "$(/bin/date +%Y/%m/%d-%T) : Checked : ${checked_count}" >> ${LOG_FILE}
echo -e "$(/bin/date +%Y/%m/%d-%T) : Failed : ${failed_count}" >> ${LOG_FILE}
